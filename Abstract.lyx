#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass report
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing onehalf
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 0
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 0
\use_package mhchem 1
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter*
Abstract
\end_layout

\begin_layout Standard
In this paper we investigate the issue of resource matching between jobs
 and machines in Intel's compute farm.
 We show that common heuristics such as Best-Fit and Worse-Fit may fail
 to properly utilize the available resources when applied to either cores
 or memory in isolation.
 In an attempt to overcome the problem we propose Mix-Fit, a heuristic which
 attempts to balance usage between resources.
 While this indeed usually improves upon the single-resource heuristics,
 it too fails to be optimal in all cases.
 As a solution we default to Max-Jobs, a meta-heuristic that employs all
 the other heuristics as sub-routines, and selects the one which matches
 the highest number of jobs.
 Extensive simulations that are based on real workload traces from four
 different Intel sites demonstrate that Max-Jobs is indeed the most robust
 heuristic for diverse workloads and system configurations, and provides
 up to 22% reduction in the average wait time of jobs.
\end_layout

\end_body
\end_document
